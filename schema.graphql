type User @entity {
  id: ID! # address
  isMember: Boolean!
  coverCount: Int!
  stakeCount: Int!
  claimCount: Int!
  voteCount: Int!
  covers: [Cover!]! @derivedFrom(field: "user")
  stakes: [Stake!]! @derivedFrom(field: "user")
  claims: [Claim!]! @derivedFrom(field: "user")
  votes: [Vote!]! @derivedFrom(field: "user")
}

type InsuredContract @entity {
  id: ID!
  ens: String
  covers: [Cover!]! @derivedFrom(field: "contract")
  stakes: [Stake!]! @derivedFrom(field: "contract")
}

# Taken from QuotationData.Sol
enum CoverStatus { Active, ClaimAccepted, ClaimDenied, CoverExpired, ClaimSubmitted, Requested }

type Cover @entity {
  id: ID!
  user: User!
  contract: InsuredContract!
  amount: BigInt!
  daysToCover: BigInt!
  created: BigInt!
  expires: BigInt!
  premium: BigDecimal!
  premiumNXM: BigDecimal!
  status: CoverStatus!
  payout: BigInt
  claims: [Claim!]! @derivedFrom(field: "cover")
}

type Stake @entity {
  id: ID!
  user: User!
  contract: InsuredContract!
  amount: BigDecimal!
  unlockedAmount: BigDecimal!
  burntAmount: BigDecimal!
  daysToStake: Int!
  created: BigInt!
  expires: BigInt!
}

type NXMaster @entity {
  id: ID!
  self: Bytes! # address
  memberRoles: Bytes! # address
  tokenData: Bytes! # address
  claimsData: Bytes! # address
  quotationData: Bytes! # address
  tokenController: Bytes! # address
  pool1: Bytes! # address
}

enum ClaimStatus { CAVote, MemberVote, Closed }
enum Verdict { Accepted, Denied }

type Claim @entity {
  id: ID!
  user: User!
  cover: Cover!
  submitDate: BigInt!
  statusUpdateDate: BigInt!
  maxVotingTime: BigInt!
  voteCount: Int!
  status: ClaimStatus!
  verdict: Verdict
  votes: [Vote!]! @derivedFrom(field: "claim")
}

type Vote @entity {
  id: ID!
  user: User!
  claim: Claim!
  verdict: Verdict!
  submitDate: BigInt!
}

# type NXMToken @entity {
#   id: ID!
#   totalSupply: BigInt!
#   price: BigInt!
#   marketCap: BigInt!
#   users: [User]
# }